<div class="paragraph lead">
<p>The internet is one of the most&mdash;if not <em>the</em> most&mdash;impressive
pieces of technology ever created.
A reliable system connecting 4 billion machines, it has also served as a
platform enabling enormous amounts of innovation.
Today we&#8217;ll look at the web in two ways: both as a provider of services or
<em>API</em> that we can utilize when we create our own applications, and as a medium
for self-expression through a personal website.</p>
</div>
<div class="paragraph">
<p>Note that there is no written part of this lab.
Instead, we&#8217;ll expect you to find any required information using the internet
itself.
However, there are <em>two</em> separate programming components.</p>
</div>
<div class="sect1">
<h2 id="partnering">1. Picking a Project Partner</h2>
<div class="sectionbody">
<div class="paragraph">
<p>You&#8217;ll work in pairs on today&#8217;s activity.
So you may want to think about finding someone that you will also work on for
the final project, which will start later this week.
Obviously you want to find someone to work with that you enjoy working with and
think that you can do an awesome project with&mdash;since we will be giving
extra credit for some of the best projects.
Another consideration is ensuring that at least one of you has a laptop that can
smoothly run Android Studio and the emulator, or an Android phone for demoing
your new application.</p>
</div>
<div class="paragraph">
<p>You don&#8217;t have to officially pick a partner until next week, but perhaps today&#8217;s
lab is a good trial run.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="apsi">2. Exploring Web APIs <span class="text-muted">(60 Minutes)</span></h2>
<div class="sectionbody">
<div class="paragraph lead">
<p>Web interfaces make it possible for us to easily incorporate powerful services
and enormous amounts of information into our Android apps.
Many of these interfaces are publicly-available, and in other cases free API
keys are provided for experimentation and limited use.</p>
</div>
<div class="sect2">
<h3 id="_forking_and_cloning_the_lab11_android_studio_project">2.1. Forking and Cloning the Lab11 Android Studio Project</h3>
<div class="paragraph">
<p>We&#8217;ve set up an
<a href="https://github.com/cs125-illinois/Lab11-Android">GitHub repository for the
Android component of Lab11</a>.
It contains an Android Studio project that&#8217;s correctly configured for this part
of Lab 11.
Getting access to it is similar to how you
<a href="/MP/setup/git/#importing">imported MP0</a>.
But you have to fork our repository first.
If it&#8217;s not obvious how to do that, try following
<a href="https://help.github.com/articles/fork-a-repo/">these instructions</a>.</p>
</div>
<div class="paragraph">
<p><strong>Note that you should import this using Android Studio, not IntelliJ.</strong>
You&#8217;ll use IntelliJ for the <em>next</em> part of the lab.</p>
</div>
</div>
<div class="sect2">
<h3 id="_understanding_volley">2.2. Understanding Volley</h3>
<div class="paragraph">
<p>Our starter code uses
<a href="https://developer.android.com/training/volley/index.html">Google&#8217;s Volley
library</a>
to make API requests.
You may want to review
<a href="https://developer.android.com/training/volley/index.html">it&#8217;s documentation</a>
as you examine our starter code.</p>
</div>
<div class="paragraph">
<p>Similar to <a href="/MP/6/">MP6</a>, the Lab 11 code base uses a button to initiate a
web API call.
You should finish the web UI so that it displays the results in the text box
provided and uses the progress bar appropriately.</p>
</div>
<div class="paragraph">
<p>Here&#8217;s the key bit of code that is making the web API request:</p>
</div>
<div class="listingblock small">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">JsonObjectRequest jsonObjectRequest = new JsonObjectRequest(
        Request.Method.GET,
        "",
        null,
        new Response.Listener&lt;JSONObject&gt;() {
            @Override
            public void onResponse(final JSONObject response) {
                Log.d(TAG, response.toString());
            }
        }, new Response.ErrorListener() {
            @Override
            public void onErrorResponse(final VolleyError error) {
                Log.w(TAG, error.toString());
            }
        });</code></pre>
</div>
</div>
<div class="paragraph">
<p>Answer the following questions about the code above:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>What kind of HTTP request is being made?</p>
</li>
<li>
<p>What is the URL being used?</p>
</li>
<li>
<p>What code runs if the request succeeds?</p>
</li>
<li>
<p>What code runs if the request fails?</p>
</li>
<li>
<p>If the request fails, how would you find out more information about why?</p>
</li>
</ol>
</div>
</div>
<div class="sect2">
<h3 id="_adding_url_parameters_to_a_request">2.3. Adding URL Parameters to a Request</h3>
<div class="paragraph">
<p>Some APIs, like
<a href="https://iextrading.com/developer/">this one</a>,
require that you add parameters to your URL.
So if I wanted to get a quote for Apple Computer, Inc., which has symbol <code>APPL</code>,
just issuing a <code>GET</code> request with this URL:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code>https://api.iextrading.com/1.0/stock/APPL/batch</code></pre>
</div>
</div>
<div class="paragraph">
<p>Returns an empty JSON array.
Because, as
<a href="https://iextrading.com/developer/docs/#batch-requests">their documentation</a>
explains, there is a required <code>types</code> request parameter.
So, to request a quote my <code>GET</code> request URL would look like</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code>https://api.iextrading.com/1.0/stock/APPL/batch?types=quote</code></pre>
</div>
</div>
<div class="paragraph">
<p>and to get both a quote and stock news</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code>https://api.iextrading.com/1.0/stock/APPL/batch?types=quote,news</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_adding_data_to_a_code_post_code_request">2.4. Adding Data to a <code>POST</code> Request</h3>
<div class="paragraph">
<p>When you use <code>POST</code> you&#8217;ll usually want to add some JSON data to the body of the
request.
Volley makes this quite easy.
Here&#8217;s an example:</p>
</div>
<div class="listingblock small">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">// Initialize a new JSONObject from a string. Not the escaping required.
final JSONObject jsonBody = new JSONObject("{\"type\":\"example\"}");
JsonObjectRequest jsonObjectRequest = new JsonObjectRequest(
        Request.Method.POST,
        url,
        jsonBody,
        ...</code></pre>
</div>
</div>
<div class="paragraph">
<p>Note that you can create a <code>JSONObject</code> from a <code>String</code> as shown, as long as it
is valid JSON.
You also have to escape (<code>\"</code>) the double quotes inside the string literal.</p>
</div>
</div>
<div class="sect2">
<h3 id="_adding_headers_to_a_request">2.5. Adding Headers to a Request</h3>
<div class="paragraph">
<p>To authenticate with some APIs you must add your API key to the header of the
HTTP message.
For example, the documentation for the
<a href="https://goo.gl/HWpPy5">Microsoft Cognitive Services Computer Vision API</a>
that we&#8217;ve been using for <a href="/MP/6/">MP6</a>
specifies that you must add an API key to the headers with name
<code>Ocp-Apim-Subscription-Key</code>.</p>
</div>
<div class="paragraph">
<p>Here&#8217;s an example of how to do that using Volley that also logs the parameters
to the debugging output:</p>
</div>
<div class="listingblock small">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">JsonObjectRequest jsonObjectRequest = new JsonObjectRequest(
        Request.Method.GET,
        "",
        null,
        new Response.Listener&lt;JSONObject&gt;() {
            @Override
            public void onResponse(final JSONObject response) {
                Log.d(TAG, response.toString());
            }
        }, new Response.ErrorListener() {
            @Override
            public void onErrorResponse(final VolleyError error) {
                Log.w(TAG, error.toString());
            }
        }) {
            @Override
            public Map&lt;String, String&gt; getHeaders() {
                Map&lt;String, String&gt;  params = new HashMap&lt;String, String&gt;();
                params.put("Ocp-Apim-Subscription-Key", "YOUR_API_KEY");
                Log.d(TAG, params.toString());
                return params;
            }
        };</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_making_your_own_api_calls">2.6. Making Your Own API Calls</h3>
<div class="paragraph">
<p>One of the things that makes learning how to use web APIs so powerful is that
there are <em>so many of them</em>.
So for this part of the lab we&#8217;ll ask you to use <em>four</em> different external web
APIs to access different kinds of data.
We suggest that you peruse
<a href="https://github.com/toddmotto/public-apis">this list of free public APIs that
return JSON</a>
for inspiration, but you can also Google around for possible APIs to use.</p>
</div>
<div class="paragraph">
<p>You&#8217;ll also want to complete you starter application so that it both displays
the JSON that is returned in the available text box and uses a
<a href="https://developer.android.com/guide/topics/ui/notifiers/toasts.html">Toast</a>
notification to indicate errors when something goes wrong.
You should also continue to log errors and warnings using Android&#8217;s
<a href="https://developer.android.com/reference/android/util/Log.html">Logging system</a>
to aid your own development.</p>
</div>
<div class="paragraph">
<p>Choose four different web APIs to make the following kinds of requests.
Note that
<a href="https://github.com/toddmotto/public-apis">this list above</a>
distinguishes between APIs that require authentication and those that do not</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>A <code>GET</code> that does not require authentication</p>
</li>
<li>
<p>A <code>GET</code> that <em>does</em> require authentication</p>
</li>
<li>
<p>A <code>POST</code> that does not require authentication</p>
</li>
<li>
<p>A <code>POST</code> that does require authentication</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>Review the instructions above as needed to determine how to add information to
your <code>GET</code> and <code>POST</code> requests.
But don&#8217;t get stuck on one particular API for too long.
If it doesn&#8217;t seem to be working, try another one.</p>
</div>
<hr>
</div>
</div>
</div>
<div class="sect1">
<h2 id="website">3. Your Personal Website <span class="text-muted">(30 Minutes)</span></h2>
<div class="sectionbody">
<div class="paragraph lead">
<p>In the second part of the lab we&#8217;ll show you how to quickly set up your own free
personal website using
<a href="https://pages.github.com/">GitHub pages</a>.</p>
</div>
<div class="paragraph">
<p>Your personal website is your calling card on the internet.
It should look nice and contain a bit of information about you.
It does not have to be complicated, but a nice personal website easily sets you
apart from the rest of the crowd that thinks a LinkedIn or Facebook profile
counts as a personal website footnote[They don&#8217;t.].
This also gives you a chance to express some design flair and build something
that is uniquely you.</p>
</div>
<div class="paragraph">
<p>If you already have a website on GitHub pages, please find someone else in your
section to help with this part of the lab.</p>
</div>
<div class="sect2">
<h3 id="_forking_and_cloning_the_lab11_intellij_project">3.1. Forking and Cloning the Lab11 IntelliJ Project</h3>
<div class="paragraph">
<p>We&#8217;ve set up an
<a href="https://github.com/cs125-illinois/Lab11-Web">GitHub repository for the
web component of Lab11</a>.
It contains an IntelliJ project that&#8217;s correctly configured for this part of Lab
11.
Getting access to it is similar to how you
<a href="/MP/setup/git/#importing">imported MP0</a>.
But you have to fork our repository first.
If it&#8217;s not obvious how to do that, try following
<a href="https://help.github.com/articles/fork-a-repo/">these instructions</a>.</p>
</div>
<div class="paragraph">
<p><strong>Note that you should import this using IntelliJ, not Android Studio.</strong>
While there are better IDEs for editing websites, IntelliJ will be enough to get
us started today.</p>
</div>
</div>
<div class="sect2">
<h3 id="_your_goal">3.2. Your Goal</h3>
<div class="paragraph">
<p>Our web starter project contains a very simple starter website based on
<a href="https://getbootstrap.com/">Bootstrap</a>.
<a href="https://getbootstrap.com/">Bootstrap</a>
is a design framework simplifying the process of building decent-looking
websites quickly.</p>
</div>
<div class="paragraph">
<p>Before you leave lab, try to get to the point where you have forked our Lab 11
web starter code, started making some modifications, and published the result to
GitHub Pages.
Note that you should just have to turn on GitHub pages in your repository&#8217;s
settings menu and have it use your master branch&mdash;not the docs folder or a
separate branch.
Also note that it can take a few minutes for your changes to be visible.
After you turn on GitHub Pages you may need to create and push a new commit to
force GitHub to generate your site for the first time.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="mp6">4. Help with MP6 <span class="text-muted">(20 Minutes)</span></h2>
<div class="sectionbody">
<div class="paragraph">
<p>Use any remaining time in your lab section to get help with <a href="/MP/6/">MP6</a>.</p>
</div>
</div>
</div>