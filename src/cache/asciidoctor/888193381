<div class="sect1">
<h2 id="RANtLZkptzDUZcEbfOWEKFBiveKSMUOd">!</h2>
<div class="sectionbody">
<div class="openblock janini small">
<div class="content">
<div class="message">Introduction to Objects</div>
<div class="literalblock">
<div class="content">
<pre>class Course {
  String name;
  int enrollment;
}
Course CS125 = new Course();
CS125.name = "CS 125";
CS125.enrollment = 600;
System.out.println(CS125.name + " has " + CS125.enrollment + " students.");</pre>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="jJGoolxDMgvAEUjsadDYIQIZvLyYMOFI">Onward</h2>
<div class="sectionbody">
<div class="paragraph lead">
<p>These are the three main challenges that will occupy us for the remainder of the
semester:</p>
</div>
<div class="ulist s">
<ul>
<li>
<p><strong>Algorithms</strong>: How do we use computers to solve problems?</p>
</li>
<li>
<p><strong>Data structures</strong>: How do we structure information to enable efficient
algorithms?</p>
</li>
<li>
<p><strong>Software development</strong>: How do we write, debug, test, and publish <em>good</em>
computer software?</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="IfCMnfvQFZMKzUSSMrKqMWTlqPawFCRu">How Do We Structure Good Computer Programs?</h2>
<div class="sectionbody">
<div class="olist arabic s">
<ol class="arabic">
<li>
<p><strong>Break our code into reusable, testable, and understandable pieces</strong></p>
</li>
<li>
<p><strong>Combine state and behavior</strong></p>
</li>
<li>
<p>Document our code appropriately</p>
</li>
<li>
<p>Reuse preexisting solutions as much as possible</p>
</li>
<li>
<p>Share our code with others!</p>
</li>
</ol>
</div>
</div>
</div>
<div class="sect1">
<h2 id="dCfjRMSIHXwmlzKmMIjqyPIHmgoaRVNo">Design</h2>
<div class="sectionbody">
<div class="paragraph lead">
<p>Programming is an intensely creative activity.</p>
</div>
<div class="imageblock mx-auto">
<div class="content">
<img src="http://static.wixstatic.com/media/e11370_5402a709373248db8b871ca105e926ae.gif" alt="e11370 5402a709373248db8b871ca105e926ae" width="480">
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="uGZBdulxROgjhRfpsMmeuOslBrdyOvGn">Design and Modeling</h2>
<div class="sectionbody">
<div class="paragraph lead">
<p>Java objects begin to expose you to the design aspects of computer science.</p>
</div>
<div class="paragraph">
<p>Ahead of us there are no right answers, just</p>
</div>
<div class="ulist s">
<ul>
<li>
<p>creativity</p>
</li>
<li>
<p>imagination</p>
</li>
<li>
<p>holistic thinking</p>
</li>
<li>
<p>intuition</p>
</li>
<li>
<p>visualization</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="NiBbvuqsxVzDnuSKKFCJBTfCUGkTKpUA">Objects</h2>
<div class="sectionbody">
<div class="paragraph lead">
<p>Objects combine <em>state</em> (like variables) and <em>behavior</em> (like functions).</p>
</div>
<div class="ulist s">
<ul>
<li>
<p><strong>What does it <em>store</em>?</strong>
Objects allow us to structure data in more varied ways
than we can achieve with primitive types alone.</p>
</li>
<li>
<p><strong>What does it <em>do</em>?</strong>
Objects allow us to place methods with the data that they naturally belong with.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="tQzXuQadDuhOSqlvqGEdvOGYkDybMBds">Object Definition</h2>
<div class="sectionbody">
<div class="quoteblock">
<blockquote>
<div class="paragraph">
<p><a href="https://en.wikipedia.org/wiki/Object_(computer_science)">Object</a>:
In the class-based object-oriented programming paradigm, "object" refers to a
particular instance of a class where the object can be a combination of
variables, functions, and data structures.</p>
</div>
</blockquote>
</div>
</div>
</div>
<div class="sect1">
<h2 id="eeunehhPDVbMrqRabHaarshVFJwGmLpT">Object Terminology: Class</h2>
<div class="sectionbody">
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">class Person {
  String name;
  int age;
  void printName() {
    System.out.println(this.name);
  }
}</code></pre>
</div>
</div>
<div class="paragraph lead">
<p>A <em>class</em> determines how a particular <em>type</em> of object will behave.</p>
</div>
<div class="paragraph">
<p>You can think of the class as a <em>blueprint</em> that is used to create objects of a
particular type.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="XpZUnDPxPRqhKMvOCuiJVQwvwsKwCQeI">Object Terminology: Class</h2>
<div class="sectionbody">
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">class Person {
  String name;
  int age;
  void printName() {
    System.out.println(this.name);
  }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Objects of type <code>Person</code>:</p>
</div>
<div class="ulist s">
<ul>
<li>
<p>Have a variable <code>name</code> of type <code>String</code></p>
</li>
<li>
<p>Have a variable <code>age</code> of type <code>int</code></p>
</li>
<li>
<p>Have a method <code>printName</code> that takes no arguments and returns nothing</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="pCBPWpoFIqqQjraBlWBFWrSuktNHnAoi">Object Terminology: Class</h2>
<div class="sectionbody">
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">class Person {
  String name;
  int age;
  void printName() {
    System.out.println(this.name);
  }
}</code></pre>
</div>
</div>
<div class="paragraph lead">
<p>Unlike other languages, Java classes <em>cannot</em> be modified as the program runs.</p>
</div>
<div class="ulist s">
<ul>
<li>
<p>This is frustrating when writing small programs</p>
</li>
<li>
<p>This is sometimes essential when developing large programs</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="JPDxwADprFfhbkojkBllrvphhwIwETzV">Object Terminology: Instance</h2>
<div class="sectionbody">
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">class Person {
  String name;
  int age;
  void printName() {
    System.out.println(this.name);
  }
}
Person geoffrey = new Person();</code></pre>
</div>
</div>
<div class="paragraph lead">
<p>An <em>instance</em> of a class is an object of that type. We create an instance using
the <code>new</code> keyword.</p>
</div>
<div class="ulist s">
<ul>
<li>
<p><code>Person</code> is a class&mdash;a type of object</p>
</li>
<li>
<p><code>geoffrey</code> is an <em>instance</em> of type <code>Person</code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="MQNjuuWdQKvlPOfcjrFlyCQPKBzgvZzY">Dot Notation</h2>
<div class="sectionbody">
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">class Person {
  String name;
  int age;
  void printName() {
    System.out.println(this.name);
  }
}
Person geoffrey = new Person();
geoffrey.age = 38;
System.out.println(geoffrey.age);</code></pre>
</div>
</div>
<div class="paragraph lead">
<p>We access an object&#8217;s state and methods using <em>dot notation</em>.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="nRBlVUqXADqMLBYXBOvoWuGtlbtehRCs">! Dot Notation</h2>
<div class="sectionbody">
<div class="literalblock janini">
<div class="content">
<pre>class Person {
  String name;
  int age;
  void printName() {
    System.out.println(this.name);
  }
}
Person geoffrey = new Person();
geoffrey.age = 38;
System.out.println(geoffrey.age);</pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="YJFtUlNOVwOLzvEaErsBvMozqhrMfjZF">Instance Variables</h2>
<div class="sectionbody">
<div class="listingblock smaller">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">class Dimensions {
  int width; // I'm a primitive type
  int height;
}
class Room {
  String name; // I'm another object
  Dimensions dimensions; // I'm defined above
}
Room diningRoom = new Room();
diningRoom.dimensions = new Dimensions();
diningRoom.dimensions.width = 10;</code></pre>
</div>
</div>
<div class="paragraph lead">
<p>Instance variables can be both <em>primitive</em> types or <em>other objects</em>.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="BtTabNVDrpmrkWydxVoePkOuGAYPdDPr">! Instance Variables</h2>
<div class="sectionbody">
<div class="literalblock janini smaller">
<div class="content">
<pre>class Dimensions {
  int width;
  int height;
}
class Room {
  String name;
  Dimensions dimensions;
}
Room diningRoom = new Room();
diningRoom.dimensions = new Dimensions();
diningRoom.dimensions.width = 10;</pre>
</div>
</div>
</div>
</div>
<div class="sect1 oneword">
<h2 id="QKoelNsUekcMuVBvjHhyiYidAywzNuuZ">Objects as Data Structures</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Sometimes known as
<a href="https://en.wikipedia.org/wiki/Record_(computer_science)">records</a>&mdash;but
objects are much more than that&#8230;&#8203;</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="FSUYlrfygwJYgAGbGByoHcgFerXgMevA">Instance Methods</h2>
<div class="sectionbody">
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">class Dimensions {
  int width;
  int height;

  int area() {
    return this.width * this.height;
  }
}
Dimensions example = new Dimensions();
example.width = 10;
example.height = 20;
System.out.println(example.area());</code></pre>
</div>
</div>
<div class="paragraph lead">
<p>Classes can also define <em>methods</em> that can be called on each instance.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="UxypbwOQeusYmUxzaebjabnlldPPHPpW">! Instance Methods</h2>
<div class="sectionbody">
<div class="literalblock janini smaller">
<div class="content">
<pre>class Dimensions {
  int width;
  int height;

  int area() {
    return this.width * this.height;
  }
}
Dimensions example = new Dimensions();
example.width = 10;
example.height = 20;
System.out.println(example.area());</pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="RMaYcanoUrSLGdCNmceJWPufMKLREDfe"><code>this</code></h2>
<div class="sectionbody">
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">class Dimensions {
  int width;
  int height;

  int area() {
    return this.width * this.height;
  }
}</code></pre>
</div>
</div>
<div class="paragraph lead">
<p>Instance methods can refer to <em>their</em> instance variables using the <code>this</code>
keyword.</p>
</div>
<div class="paragraph">
<p><code>this</code> refers to the instance that is executing the method.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="yTJJsqMvhSnqjEWSwVajTRJXLjxzKApB">! <code>this</code></h2>
<div class="sectionbody">
<div class="literalblock janini smaller">
<div class="content">
<pre>class Dimensions {
  int width;
  int height;
  int area() {
    return this.width * this.height;
  }
}
Dimensions first = new Dimensions();
first.width = 10;
first.height = 20;
System.out.println(first.area());

Dimensions second = new Dimensions();
second.width = 5;
second.height = 8;
System.out.println(second.area());</pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="UhRoujqXVElCPEtqYlumSfVTjAukGgHP">Object Modeling</h2>
<div class="sectionbody">
<div class="paragraph lead">
<p>We frequently use Java objects to model real objects or entities.</p>
</div>
<div class="paragraph">
<p>Objects allow us to <em>design</em> software that deals with things in realistic and
natural ways.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="uUWeERVdFCTRYAuCBLisHWEWmTOLgGVW">!MP Stats</h2>
<div class="sectionbody">
<div class="embed-responsive embed-responsive-4by3">
  <iframe class="embed-responsive-item" src="https://cs125.cs.illinois.edu/m/grades/MPs/#stats"></iframe>
</div>
</div>
</div>
<div class="sect1">
<h2 id="nEQlRVuljvYOsTAjPOSHdcMXKrCxkfWr">Announcements</h2>
<div class="sectionbody">
<div class="ulist">
<ul>
<li>
<p><a href="/MP/3/">MP3</a> is out and due a week from Friday.
It&#8217;s your introduction to object-oriented programming, so you&#8217;ll be learning
what you need to complete it in lecture and lab this week.</p>
</li>
<li>
<p>My office hours continue today at 11AM in the lounge outside of Siebel 0226.</p>
</li>
</ul>
</div>
</div>
</div>