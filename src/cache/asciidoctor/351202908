<div class="paragraph lead">
<p>Welcome to Android!
For MP6 you&#8217;ll get introduced to Android by modifying a simple app.
But the core topic of the MP are actually using application programmer
interfaces (APIs) and serialization.
You&#8217;ll get practice using the
<a href="https://azure.microsoft.com/en-us/services/cognitive-services/">Microsoft Cognitive Services API</a>
and on parsing data formatted in
<a href="https://www.json.org/">JavaScript Object Notation (JSON)</a>,
a simple and widely-supported data exchange format.</p>
</div>
<div class="paragraph">
<p><strong>MP6 is due Wednesday 4/11/2018 @ 5PM.
To receive full credit, you must submit by this deadline.</strong>
In addition, 10% of your grade on MP6 is for submitting code that earns at least
<em>40 points</em> by <strong>Monday 4/9/2018 @ 5PM.</strong>
As usual, late submissions will be subject to the
<a href="/info/syllabus/#regrading">MP late submission policy</a>.</p>
</div>
<div class="sect1">
<h2 id="objectives">1. Learning Objectives</h2>
<div class="sectionbody">
<div class="paragraph">
<p>MP6 introduces you to using integrating external APIs into your projects and to
Android development.
We&#8217;ll show you how to use the powerful <a href="https://azure.microsoft.com/en-us/services/cognitive-services/">Microsoft Cognitive Services API</a> to analyze image data, and you&#8217;ll
learn how to process the results.
We&#8217;ll also introduce you to the structure of a simple Android app, and you&#8217;ll
get practice modifying the UI to reflect the information provided by the
Cognitive Services API.
We&#8217;ll also continue to reinforce the learning objectives from previous MPs
(<a href="/MP/0/">0</a>, <a href="/MP/1/">1</a>, <a href="/MP/2/">2</a>, <a href="/MP/3/">3</a>,
<a href="/MP/4/">4</a>, and <a href="/MP/5/">5</a>).</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="structure">2. Assignment Structure</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Unlike previous MPs, MP6 is split into two pieces:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>/lib/</code>: a small library that extracts certain pieces of information from the
image data returned by the <a href="https://azure.microsoft.com/en-us/services/cognitive-services/">Microsoft Cognitive Services API</a>.
<strong>This library is the only part of the MP tested by the test suite.</strong></p>
</li>
<li>
<p><code>/app/</code>: an Android app for you to use for your own interactive testing.
The Android app is <em>almost</em> complete, but needs a few modifications from you.
And, to work correctly, you need to finish the library in <code>lib</code>.</p>
</li>
</ul>
</div>
<div class="sect2">
<h3 id="lib">2.1. MP6 Image Recognition Library (<code>lib</code>)</h3>
<div class="paragraph">
<p>The <a href="#app">MP6 app</a> handles uploading photos to the <a href="https://azure.microsoft.com/en-us/services/cognitive-services/">Microsoft Cognitive Services API</a>.
However, once the results are returned it relies on your library to extract a
few pieces of "important" information:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><strong>The image width, height, and format</strong>: using <code>getWidth</code>, <code>getHeight</code>, and
<code>getFormat</code>.</p>
</li>
<li>
<p><strong>The autogenerated image caption</strong>: using <code>getCaption</code></p>
</li>
<li>
<p><strong>Whether the image contains a dog or a cat</strong> <sup class="footnote">[<a id="_footnoteref_1" class="footnote" href="#_footnote_1" title="View footnote.">1</a>]</sup>: using
<code>isADog</code> and <code>isACat</code></p>
</li>
<li>
<p><strong>Whether you&#8217;ve been
<a href="https://en.wikipedia.org/wiki/Rickrolling">rickrolled</a></strong>:
that is, whether the photo contains
<a href="https://en.wikipedia.org/wiki/Rick_Astley">Rick Astley</a>,
using <code>isRick</code>.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>As always, you may find our
<a href="https://cs125-illinois.github.io/MP6-Starter/">official MP6 online documentation</a>
useful as you understand what you need to do.
If you believe that the documentation is unclear, please post on the <a href="https://cs125-forum.cs.illinois.edu/c/mps/mp6" class="noexternal">forum</a> and
we&#8217;ll offer clarification as needed.
To complete this part of the assignment you&#8217;ll want to review the
<a href="#json">section on JSON below</a>.</p>
</div>
</div>
<div class="sect2">
<h3 id="app">2.2. MP6 App</h3>
<div class="paragraph">
<p>The MP6 app handles obtaining images&mdash;either ones save previously on the
device, captured by the camera, or downloaded from the internet.
It also uploads those images to the <a href="https://azure.microsoft.com/en-us/services/cognitive-services/">Microsoft Cognitive Services API</a> and updates the UI
appropriately&mdash;or at least parts of it.</p>
</div>
<div class="paragraph">
<p>To complete MP6 most of the lines of code that you write will be completing the
<a href="#lib">image recognition library</a>.
However, there are a few small changes that we encourage you to make so that the
user interface functions properly.
We&#8217;ve done a few things to get you started.
Examine <code>finishProcessImage</code> to see how we use the results from <code>getWidth</code>,
<code>getHeight</code>, and <code>getFormat</code> to update a part of the UI.
To complete the UI you&#8217;ll need to do the following things:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><strong>Update the caption</strong> using the result from <code>getCaption</code>.
You should be able to use our example of updating the description as a starting
point.</p>
</li>
<li>
<p><strong>Show or hide the cat and dog icons as appropriate.</strong>
You may want to look at <code>updateCurrentBitmap</code> for examples of how these icons
are <em>hidden</em> when the current image is cleared.</p>
</li>
<li>
<p><strong>Do something when you find Rick.</strong>
You do want to celebrate, right?
Maybe try something
<a href="https://stackoverflow.com/questions/574195/android-youtube-app-play-video-intent">like
this</a>.</p>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="getting">2.3. Obtaining MP6</h3>
<div class="paragraph">
<p><strong>Note that we are using Android Studio for MP6.</strong>
Use
<a href="https://classroom.github.com/a/qJ5dPKlE">this GitHub Classroom invitation link</a>
to fork your copy of MP6.
Once your repository has been created, import it into <strong>Android Studio</strong> following
<a href="/MP/setup/git/#workflow">our assignment Git workflow guide</a>.</p>
</div>
</div>
<div class="sect2">
<h3 id="requirements">2.4. Your Goal</h3>
<div class="paragraph">
<p>At this point you should be familiar with the requirements from previous MPs.
See the <a href="#grading">grading description below</a>.
However, note that for MP6 <strong>we have not provided a complete test suite</strong>.
You will have to figure out how to test your Rick Astley detection yourself.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="approach">3. Approaching MP6</h2>
<div class="sectionbody">
<div class="paragraph lead">
<p>As you approach MP6, focus on two core tasks: <a href="#json">working with JSON</a>, and
starting to find your way around <a href="#android">Android</a>.</p>
</div>
<div class="sect2">
<h3 id="json">3.1. JSON</h3>
<div class="paragraph lead">
<p>Object-oriented languages make it easy to model data internally by designing
classes.
But at times we need to exchange data between two different programs or systems,
possibly implemented in different languages.
That requires representing the data in a format that <em>both</em> systems can
understand.
JSON (JavaScript Object Notation) is one popular <em>data exchange</em> format in wide
use on the internet, and frequently used to communicate with web APIs.</p>
</div>
<div class="paragraph">
<p>JSON is both simple and incredibly powerful.
It is based on only two different principles, but can represent a wide variety
of different data.
Using the <a href="https://azure.microsoft.com/en-us/services/cognitive-services/">Microsoft Cognitive Services API</a> requires understanding JSON, and completing MP6 requires that
you implement several simple JSON parsing tasks.</p>
</div>
<div class="sect3">
<h4 id="_what_is_json">3.1.1. What is JSON?</h4>
<div class="paragraph">
<p>Imagine we have an instance of the following Java class:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">public Person {
    public String name;
    public int age;

    Person(String setName, String setAge) {
        name = setName;
        age = setAge;
    }
}
Person geoffrey = new Person("Geoffrey", 38);</code></pre>
</div>
</div>
<div class="paragraph">
<p>Now image we want to send this information to another computer program: for
example, from an Android app written in Java to a web application programmer
interface (API) that could be written in Java, Python, or any other language.
How do we represent this information in a way that is correct and complete, yet
also portable.</p>
</div>
<div class="paragraph">
<p>JSON (JavaScript Object Notation) has become a popular answer to that question.
While it is named after
<a href="https://www.javascript.com/">JavaScript</a>,
the language that introduced JSON, JSON is now supported by pretty much every
common programming language.
This allows an app written in Java to communicate with a web API written in
Python, or a web application written in JavaScript to communicate with a web
backend written in Rust.</p>
</div>
<div class="paragraph">
<p>Enough talk.
Here&#8217;s how the object above could be represented in JSON:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-json" data-lang="json">{
  "name": "Geoffrey",
  "age": 38
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>JSON has only <em>two</em> ways to structure data: objects and arrays.
Above you seen an example object.
Like Java, it has named variable (<code>name</code>, <code>age</code>) each of which takes on a
particular value ("Geoffrey", 38).
Here&#8217;s another example.
The following instance of this Java object:</p>
</div>
<div class="listingblock small">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">public Course {
    public String name;
    public int enrollment;
    public double averageGrade;

    Course(String setName, String setEnrollment, double setAverageGrade) {
        name = setName;
        enrollment = setEnrollment;
        averageGrade = setAverageGrade;
    }
}
Course cs125 = new Course("CS 125", 500, 3.9);</code></pre>
</div>
</div>
<div class="paragraph">
<p>would be represented as this JSON string:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-json" data-lang="json">{
  "name": "CS 125",
  "enrollment": 500,
  "averageGrade": 3.9
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>JSON can also represent arrays.
This Java array:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">int[] array = new int[] { 1, 2, 10, 8 };</code></pre>
</div>
</div>
<div class="paragraph">
<p>would be represented using this JSON string:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-json" data-lang="json">[1, 2, 10, 8]</code></pre>
</div>
</div>
<div class="paragraph">
<p>We can also represent nested objects and objects with array instance variables:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">public Person {
    public String name;
    public int age;

    Person(String setName, String setAge) {
        name = setName;
        age = setAge;
    }
}
public Course {
    public String name;
    public int enrollment;
    public double averageGrade;
    public Person instructor;
    public int[] grades;

    Course(String setName, String setEnrollment,
        double setAverageGrade, Person setInstructor,
        int[] setGrades) {
        name = setName;
        enrollment = setEnrollment;
        averageGrade = setAverageGrade;
        instructor = setInstructor;
        grades = setGrades;
    }
}
Course cs125 = new Course("CS 125", 500, 3.9,
  new Person("Geoffrey", 38), new int[] { 4, 4, 3 });</code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-json" data-lang="json">{
  "name": "CS 125",
  "enrollment": 500,
  "averageGrade": 3.9,
  "instructor": {
    "name": "Geoffrey",
    "age": 38
  },
  "grades": [
    4,
    4,
    3
  ]
}</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_parsing_json">3.1.2. Parsing JSON</h4>
<div class="paragraph">
<p>Because JSON is supported by many different programming languages, many web APIs
return data in JSON format.
The <a href="https://azure.microsoft.com/en-us/services/cognitive-services/">Microsoft Cognitive Services API</a> is one of them.
To utilize this data, you must first <em>parse</em> it or <em>deserialize</em> it.
The process of converting a Java object&mdash;or object in any language&mdash;to
JSON is called serialization.
The reverse process is called deserialization.</p>
</div>
<div class="paragraph">
<p>Happily, good libraries exist to parse JSON in every programming language.
Java is no exception.
We have included the Google
<a href="https://github.com/google/gson">GSON</a>
JSON parsing library in your project for you to use.</p>
</div>
<div class="paragraph">
<p>One way to use GSON is to create a class that matches your JSON string.
So if you were provided with this JSON from a web API:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-json" data-lang="json">{
  "number": 0,
  "caption": "I'm a zero"
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>you would design this Java class to represent it:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">public class Result {
    public int number;
    public String caption;
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Note how our classes mirrors both the names (<code>number</code>, <code>caption</code>) and types (<code>int</code>,
<code>String</code>) from the JSON result.</p>
</div>
<div class="paragraph">
<p>However, when you are working with unfamiliar JSON data, as you are in MP6, we
suggest that you <em>not</em> create new classes and instead
<a href="https://stackoverflow.com/questions/16595493/gson-parsing-without-a-lot-of-classes">use
the built-in Java classes</a>.
Here&#8217;s an example of how to do this given the JSON string shown above:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">JsonParser parser = new JsonParser();
JsonObject result = parser.parse(jsonString).getAsJsonObject();
int number = result.get("number").getAsInt();
String caption = result.get("caption").getAsString();</code></pre>
</div>
</div>
<div class="paragraph">
<p><strong>Note that for MP6 we will not grade any addition class files you add to your
<code>lib</code> directory.</strong>
So we suggest you follow our example above <sup class="footnote">[<a id="_footnoteref_2" class="footnote" href="#_footnote_2" title="View footnote.">2</a>]</sup>.</p>
</div>
</div>
</div>
<div class="sect2">
<h3 id="android">3.2. Android</h3>
<div class="paragraph">
<p>Android is a Java-based framework for building smartphone apps that run on the
Android platform.
By learning how to build Android apps, your programs can have enormous impact.
As of a year ago, Google estimated that there were
<a href="https://www.macrumors.com/2017/05/17/2-billion-active-android-devices/"><em>2
billion</em></a>
active Android devices.
That&#8217;s over 25% of people on Earth&mdash;and
<a href="http://fortune.com/2017/03/06/apple-iphone-use-worldwide/">several times more
than iOS</a>.</p>
</div>
<div class="paragraph">
<p>However, Android is also a huge and complex system.
It&#8217;s easy to feel lost when you are getting started.
Our best advice is to just slow down, take a deep breath, and try to understand
a bit of what is going on at a time.
We&#8217;ll try to walk you through a few of the salient bits for MP6 below.</p>
</div>
<div class="sect3">
<h4 id="_a_href_https_developer_android_com_reference_android_util_log_html_logging_a">3.2.1. <a href="https://developer.android.com/reference/android/util/Log.html">Logging</a></h4>
<div class="row justify-content-center mt-3 mb-3">
  <div class="col-12 col-lg-8">
    <div class="embed-responsive embed-responsive-4by3">
      <iframe class="embed-responsive-item" width="560" height="315" src="//www.youtube.com/embed/YTKKvmcmUOY" allowfullscreen></iframe>
    </div>
  </div>
</div>
<div class="paragraph">
<p>Like any other computer program, an important part of developing on Android is
generating debugging output.
On Android, our familiar <code>System.out.println</code>
<a href="https://stackoverflow.com/questions/2220547/why-doesnt-system-out-println-work-in-android">doesn&#8217;t quite work the same way we&#8217;re used to</a>.</p>
</div>
<div class="paragraph">
<p>However, Android has a simple yet powerful <em>logging</em> system.
Unlike <code>System.out.println</code>, logging systems allow you to specify multiple log
<em>levels</em> indicating the kind of output that you are generating.
This allows you to distinguish between, for example, debugging output that might
only be useful during development and a warning message that might indicate a
more serious problem or failure.
The Android logger also allows you to attach a <code>String</code> <em>tag</em> to each message to
help separate them when you are debugging or developing.
So the final syntax of the call to generate a debugging message, for example, is
<code>Log.d(TAG, message)</code>.</p>
</div>
<div class="paragraph">
<p>For more information, watch the screencast above or review
<a href="https://developer.android.com/reference/android/util/Log.html">Android&#8217;s official
logging documentation</a>.</p>
</div>
</div>
<div class="sect3">
<h4 id="_a_href_https_developer_android_com_reference_android_app_activity_html_activities_a">3.2.2. <a href="https://developer.android.com/reference/android/app/Activity.html">Activities</a></h4>
<div class="row justify-content-center mt-3 mb-3">
  <div class="col-12 col-lg-8">
    <div class="embed-responsive embed-responsive-4by3">
      <iframe class="embed-responsive-item" width="560" height="315" src="//www.youtube.com/embed/gwqz1Tm4jTA" allowfullscreen></iframe>
    </div>
  </div>
</div>
<div class="paragraph">
<p>The Android
<a href="https://developer.android.com/reference/android/app/Activity.html"><code>Activity</code> class</a>
corresponds to a single screen that the user can interact with.
Our simple app contains only one activity, but most apps consist of several:
maybe an activity corresponding to the app&#8217;s main screen, another for a
settings dialog, and still others for other parts of the app.</p>
</div>
<div class="paragraph">
<p>As you might expect, there are two important moments for an activity: when it
appears on the screen, and when it leaves the screen.
Android provides functions that you can override to handle both of these events:
<code>onCreate</code> and <code>onPause</code>.
It is typical for on <code>onCreate</code> method to perform tasks required to make the
activity ready for a user to use, such as configuring buttons and other UI
elements.</p>
</div>
<div class="paragraph">
<p>For more information watch the screencast above or review
<a href="https://developer.android.com/reference/android/app/Activity.html">Android&#8217;s
official <code>Activity</code> information</a>.</p>
</div>
</div>
<div class="sect3">
<h4 id="_ui_events">3.2.3. UI Events</h4>
<div class="row justify-content-center mt-3 mb-3">
  <div class="col-12 col-lg-8">
    <div class="embed-responsive embed-responsive-4by3">
      <iframe class="embed-responsive-item" width="560" height="315" src="//www.youtube.com/embed/_Upqc-IO5_s" allowfullscreen></iframe>
    </div>
  </div>
</div>
<div class="paragraph">
<p>Why does code in your app run?
In many cases it&#8217;s because a user <em>interacted</em> with an activity&mdash;clicked a
button, entered text into a dialog box, or adjusted an on-screen control.
Android provides a way for each app to register <em>handlers</em> than run when various
user interface (UI) events take place.</p>
</div>
<div class="paragraph">
<p>Our app uses these to:
* start the open file dialog
* start the process of capturing an image from the camera
* open the download file input box
* rotate the image
* and upload it to the <a href="https://azure.microsoft.com/en-us/services/cognitive-services/">Microsoft Cognitive Services API</a> for processing.
In the screencast above we show how elements of the user interface are linked
programmatically to each specific action.</p>
</div>
</div>
<div class="sect3">
<h4 id="_ui_modifications">3.2.4. UI Modifications</h4>

</div>
<div class="sect3">
<h4 id="_tasks">3.2.5. Tasks</h4>

</div>
<div class="sect3">
<h4 id="_a_href_https_azure_microsoft_com_en_us_services_cognitive_services_microsoft_cognitive_services_api_a">3.2.6. <a href="https://azure.microsoft.com/en-us/services/cognitive-services/">Microsoft Cognitive Services API</a></h4>

</div>
</div>
<div class="sect2">
<h3 id="help">3.3. Getting Help</h3>
<div class="paragraph">
<p>The course staff is ready and willing to help you every step of the way!
Please come to <a href="/info/syllabus/#calendar">office hours</a>, or post on the
<a href="https://cs125-forum.cs.illinois.edu/c/mps/mp6" class="noexternal">forum</a> when you need help.
You should also feel free to help each other, as long as you do not violate the
<a href="#cheating">academic integrity requirements</a>.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="grading">4. Grading</h2>
<div class="sectionbody">
<div class="paragraph">
<p>MP6 is worth 100 points total, broken down as follows:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p><strong>10 points</strong>: for submitting code that compiles</p>
</li>
<li>
<p><strong>10 points</strong>: for <code>getWidth</code></p>
</li>
<li>
<p><strong>10 points</strong>: for <code>getHeight</code></p>
</li>
<li>
<p><strong>10 points</strong>: for <code>getFormat</code></p>
</li>
<li>
<p><strong>10 points</strong>: for <code>getCaption</code></p>
</li>
<li>
<p><strong>10 points</strong>: for <code>isADog</code></p>
</li>
<li>
<p><strong>10 points</strong>: for <code>isACat</code></p>
</li>
<li>
<p><strong>10 points</strong>: for <code>isRick</code></p>
</li>
<li>
<p><strong>10 points</strong> for no <code>checkstyle</code> violations</p>
</li>
<li>
<p><strong>10 points</strong> for committing code that earns at least 40 points before <strong>Monday
4/9/2018 @ 5PM.</strong></p>
</li>
</ol>
</div>
<div class="sect2">
<h3 id="testing">4.1. Test Cases</h3>
<div class="paragraph">
<p>As in previous MPs, we have provided test cases for MP6.
Please review the <a href="/MP/0/#testing">MP0 testing instructions</a>.</p>
</div>
<div class="paragraph">
<p>However, <em>unlike</em> previous MPs we have not provided <em>complete</em> test cases for
MP6.
Specifically, we have not provided a test for <code>isRick</code>.
This is intentional, and designed to force you to do your own local testing.
It is also designed to not give away exactly what features of the JSON returned
by the <a href="https://azure.microsoft.com/en-us/services/cognitive-services/">Microsoft Cognitive Services API</a> you will need to look at to complete <code>isRick</code>.</p>
</div>
</div>
<div class="sect2">
<h3 id="autograding">4.2. Autograding</h3>
<div class="paragraph">
<p>Like previous MPs we have provided you with an
autograding script that you can use to estimate your current grade as often as
you want.
Please review the <a href="/MP/0#autograding">MP0 autograding instructions</a>.
However, as <a href="#testing">described above</a> note that the local test suite will not
test <code>isRick</code>, while the remote test suite will.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="submitting">5. Submitting Your Work</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Follow the instructions from the
<a href="/MP/setup/git#submitting">submitting portion</a>
of the
<a href="/MP/setup/git#workflow">CS 125 workflow</a>
instructions.</p>
</div>
<div class="paragraph">
<p>And remember, you must submit something that earns 40 points before <strong>Monday
4/9/2018 @ 5PM</strong> to earn 10 points on the assignment.</p>
</div>
<div class="sect2">
<h3 id="cheating">5.1. Academic Integrity</h3>
<div class="paragraph">
<p>Please review the <a href="/MP/0#cheating">MP0 academic integrity guidelines</a>.</p>
</div>
<div class="paragraph">
<p>If you cheat, we will make your watch this over and over again:</p>
</div>
<div class="row justify-content-center mt-3 mb-3">
  <div class="col-12 col-lg-8">
    <div class="embed-responsive embed-responsive-4by3">
      <iframe class="embed-responsive-item" width="560" height="315" src="//www.youtube.com/embed/dQw4w9WgXcQ" allowfullscreen></iframe>
    </div>
  </div>
</div>
</div>
</div>
</div>
<div id="footnotes">
<hr>
<div class="footnote" id="_footnote_1">
<a href="#_footnoteref_1">1</a>. Or both!
</div>
<div class="footnote" id="_footnote_2">
<a href="#_footnoteref_2">2</a>. Or define your deserialization classes as inner classes to the <code>RecognizePhoto</code> class you are working on&#8230;&#8203; if you really know what you are doing.
</div>
</div>